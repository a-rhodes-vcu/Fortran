

 1. Alphabetical ICD
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Final Project: Finding all Possible Combinations of ICD codes
! BNFO 591: High Performace Compootering
! Dr. Witten
! Skyler, Hasan, Alex
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
program finalProject
implicit none
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
character(len=4),dimension(0:32)::icdlist, sortedicdlist
character(len=2), dimension(0:675) :: di_letterlist
character(len=4) :: code,icdcode
character(len=26):: alphabet
integer :: icdlist_index = 0,i,j,k,di_index,m
logical inFile
inFile = .TRUE.
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!-----Reading in the File------!
open(unit=666,file="icd_codes.txt",status="old") !reading in icd codes files with unit 666
open(unit=123,file="sorted_icd_codes.txt",status="old")

do while(infile) !this while loop will grab each line from ICD codes file until infile is set to false
    	read(unit=666,FMT=*) code
    	!print *, code
    	icdlist(icdlist_index) = code
    	if (code == "XTRN") then !if the last code was reached in the file then set infile to false. this will finish while loop
            	infile= .false.
    	endif
    	icdlist_index = icdlist_index + 1
end do

!-----Seeing if everything was added to the our ICD_List------!
do 1313 i=0,32,1
    	print *, icdlist(i)
1313 continue

!-----Alphabetically Sorting the icdlist------!
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
!print *, alphabet
di_index = 0
do 765 j=1,26,1 !looping alphabet to generate 2mer of all letters in ORDER and appending to list ex: AA,AB,AC.....ZZ
    	do 678 k=1,26,1
            	!print *, alphabet(j:j)//alphabet(k:k) ! alphabet(j:j) represents first letter in 2mer
            	di_letterlist(di_index) = alphabet(j:j)//alphabet(k:k)
            	print *, di_letterlist(di_index)
            	di_index = di_index + 1
    	678 continue
765 continue

m=1
do 999 j = 0,675,1 !This is the loop that actually sorts the icd codes
    	do 876 k=0,32,1
            	icdcode = icdlist(k)	!grabbing an icd code to sort
            	if (di_letterlist(j) == icdcode(1:2)) then  !comparing the the alphabetical dimers to the first two letter of the icd code
                    	print *,m,icdcode
                    	write (unit=123,FMT=*) m,icdcode
                    	sortedicdlist(m)= icdcode !adding the sorted icdcode to a new list
                    	m = m + 1
            	end if
    	876 continue
999 continue
end program finalProject
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



2. Unique Combinations
program combinations

  implicit none
  integer :: i
  integer,parameter:: m_max = 1 ! we start with the dimension being one, this will be increased to 33
  integer,parameter :: n_max = 33 !the the list size will be 33
  integer, dimension (m_max) :: comb ! the name of the array is m_max
  call combos (1) !we are calling the recursive function, combos
contains
  recursive subroutine combos (h) !the start of the recursive function, passing 1 to it

	implicit none
	integer, intent (in) :: h !the is the value we are passing in
	integer :: n

	if (h > m_max) then !if h reaches m_max stop the function, and print
  	print *, comb
	Else ! else, start the iteration at 1, to n_max
  	do n = 1, n_max
    	if ((h == 1) .or. (n > comb (h - 1))) then ! if h is equal to one, or n is greater the then the size of comb, put n into comb
      	comb(h) = n
      	call combos (h + 1) !increment h by one
    	end if
  	end do
	end if

  end subroutine combos
end program combinations




3. BASH script
#!/bin/bash
echo
start=`date +%s` # used for timing
file="finalprojectCombinations.dat" #needed because we will be appending to this file later
if [ -f $file ] ; then
	rm $file
fi
echo "#######################################################################"

for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33; do  # this can be changed to 1-33 later
	#echo dimenison, $i
	echo "------------"
	echo "Dimension$i: Unique Combination Program and Binary File Created"
	filename="testfinalProject${i}.f90" # change to "testfinalProject${i}.f90"
	sed -e 5s/1/$i/g uniqueCombinations.f90 > $filename
	outputname="testfinalProject${i}.o"
	gfortran $filename -o $outputname
	if [ $i -le 2 ] ; then   # add the first few hundred combinations
    	./$outputname >> finalprojectCombinations.dat
	fi
done
echo "#######################################################################"

end=`date +%s` # used for timing
runtime=$((end-start))
echo " 	---->Timing: Process took $runtime seconds to complete<----"
echo  # new line
echo "First 100 Lines of Output"
python textprocessing.py
echo
4. Python Text-processing script

# Text processing script to add the following to the end of each line: -999 and any numbers set not in the set
# Skyler, Hasan, Alex
fortranFH = open("finalprojectCombinations.dat", "r")
fortranwriteFH = open("finalprojectCombs100.dat", "w")  # we will be writing the first hundred combinations to this file
combfile = fortranFH
filelist =[]
num_list = [str(x) for x in range(1,34)]
# print num_list

for line in combfile:
	linelist = line.split()
	filelist.append(linelist)
# print filelist
counter2 = 0
for i in filelist:
	counter = 0
	counter2 += 1
	if counter2 > 100:
    	break
	for j in i:
    	counter += 1
    	combs = " ".join(i)
    	print combs, "-999",
    	print >> fortranwriteFH, combs, "-999",
    	for k in num_list:
        	if j != k and k not in i:
            	print k,
            	print >> fortranwriteFH, k,
    	print ""
    	print >> fortranwriteFH, ""
    	if counter == 1:
        	break
